buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.24', changing: true
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'

version = '1.0.0'
group = 'com.servertest.mod'

base {
    archivesName = 'servertest'
}

// Ensure reproducible builds
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.20.1'

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                servertest {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'forge.enabledGameTestNamespaces', 'servertest'
            args '--nogui'
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', 'servertest', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.4.0'

    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.mockito:mockito-core:5.1.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.1.1'
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : 'Server Test Mod',
                'Specification-Vendor'    : 'ServerTest Team',
                'Specification-Version'   : '1',
                'Implementation-Title'    : 'servertest',
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : 'ServerTest Team',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Automatic-Module-Name'   : 'servertest'
        ])
    }

    // Ensure the JAR is properly named for CI
    archiveBaseName = 'servertest'
    archiveVersion = project.version
    
    finalizedBy 'reobfJar'
}

// Task to verify JAR contents for CI
task verifyJar {
    dependsOn 'jar'
    doLast {
        def jarFile = tasks.jar.archiveFile.get().asFile
        if (!jarFile.exists()) {
            throw new GradleException("JAR file not found: ${jarFile}")
        }
        
        // Verify JAR size is reasonable (should be > 10KB for our mod)
        if (jarFile.length() < 10240) {
            throw new GradleException("JAR file seems too small: ${jarFile.length()} bytes")
        }
        
        println "JAR verification passed: ${jarFile.name} (${jarFile.length()} bytes)"
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

test {
    useJUnitPlatform()
    
    // Configure test output for CI
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// Task specifically for CI builds
task ciBuild {
    dependsOn 'clean', 'jar', 'verifyJar'
    description 'Complete build task for CI environments'
    
    doLast {
        println "CI Build completed successfully"
        println "JAR location: ${tasks.jar.archiveFile.get().asFile}"
    }
}

// Task for CI builds with tests (may fail due to test environment issues)
task ciBuildWithTests {
    dependsOn 'clean', 'test', 'jar', 'verifyJar'
    description 'Complete build task for CI environments including tests'
    
    doLast {
        println "CI Build with tests completed successfully"
        println "JAR location: ${tasks.jar.archiveFile.get().asFile}"
    }
}